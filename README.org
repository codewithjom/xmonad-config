#+title: XMonad Config
#+property: header-args :tangle xmonad.hs
#+author: Jom Dollesin

* About This Config

[[https://raw.githubusercontent.com/codewithjom/dotfiles/master/.xmonad/lib/Scripts/xmonad-screenshot.jpg]]

Xmonad is a dynamically tiling X11 window manager that is written and configured in Haskell.
- XMonad Official Website: [[https://xmonad.org][https://xmonad.org]]
- Haskell Official Website: [[https://haskell.org][https://haskell.org]]

This is the xmonad configuration of Jom Dollesin
- My GitHub: [[https://github.com/codewithjom]]

* Imports

These are Haskell modules that we must import so that we can use their functions later in the config.

#+begin_src haskell

  -- Base
  import XMonad
  import System.Directory
  import System.IO (hPutStrLn)
  import System.Exit (exitSuccess)
  import qualified XMonad.StackSet as W

  -- Actions
  import XMonad.Actions.CopyWindow (kill1)
  import XMonad.Actions.CycleWS (Direction1D(..), moveTo, shiftTo, WSType(..), nextScreen, prevScreen)
  import XMonad.Actions.GridSelect
  import XMonad.Actions.MouseResize
  import XMonad.Actions.Promote
  import XMonad.Actions.RotSlaves (rotSlavesDown, rotAllDown)
  import XMonad.Actions.WindowGo (runOrRaise)
  import XMonad.Actions.WithAll (sinkAll, killAll)
  import qualified XMonad.Actions.Search as S

  -- Data
  import Data.Char (isSpace, toUpper)
  import Data.Maybe (fromJust)
  import Data.Monoid
  import Data.Maybe (isJust)
  import Data.Tree
  import qualified Data.Map as M

  -- Hooks
  import XMonad.Hooks.DynamicLog (dynamicLogWithPP, wrap, xmobarPP, xmobarColor, shorten, PP(..))
  import XMonad.Hooks.EwmhDesktops  -- for some fullscreen events, also for xcomposite in obs.
  import XMonad.Hooks.ManageDocks (avoidStruts, docksEventHook, manageDocks, ToggleStruts(..))
  import XMonad.Hooks.ManageHelpers (isFullscreen, doFullFloat, doCenterFloat)
  import XMonad.Hooks.ServerMode
  import XMonad.Hooks.SetWMName
  import XMonad.Hooks.WorkspaceHistory

  -- Layouts
  import XMonad.Layout.Accordion
  import XMonad.Layout.GridVariants (Grid(Grid))
  import XMonad.Layout.SimplestFloat
  import XMonad.Layout.Spiral
  import XMonad.Layout.ResizableTile
  import XMonad.Layout.Tabbed
  import XMonad.Layout.ThreeColumns

  -- Layouts modifiers
  import XMonad.Layout.LayoutModifier
  import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)
  import XMonad.Layout.Magnifier
  import XMonad.Layout.MultiToggle (mkToggle, single, EOT(EOT), (??))
  import XMonad.Layout.MultiToggle.Instances (StdTransformers(NBFULL, MIRROR, NOBORDERS))
  import XMonad.Layout.NoBorders
  import XMonad.Layout.Renamed
  import XMonad.Layout.ShowWName
  import XMonad.Layout.Simplest
  import XMonad.Layout.Spacing
  import XMonad.Layout.SubLayouts
  import XMonad.Layout.WindowArranger (windowArrange, WindowArrangerMsg(..))
  import XMonad.Layout.WindowNavigation
  import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))
  import qualified XMonad.Layout.MultiToggle as MT (Toggle(..))

  -- Utilities
  import XMonad.Util.Dmenu
  import XMonad.Util.EZConfig (additionalKeysP)
  import XMonad.Util.NamedScratchpad
  import XMonad.Util.Run (runProcessWithInput, safeSpawn, spawnPipe)
  import XMonad.Util.SpawnOnce

  import Colors.Dracula

#+end_src

* Variables

It's nice to assign values to stuff that you will use more than once in the config. Setting values for things like font, terminal and editor means you only have to change the value here to make changes globally.

#+begin_src haskell

  myFont :: String
  myFont = "xft:Roboto Mono Nerd Font:regular:size=9:antialias=true:hinting=true"

  myModMask :: KeyMask
  myModMask = mod4Mask        -- Sets modkey to super/windows key

  myTerminal :: String
  myTerminal = "alacritty"    -- Sets default terminal

  myBrowser :: String
  myBrowser = "brave"  -- Sets brave as browser

  myEmacs :: String
  myEmacs = "emacsclient -c -a 'emacs'"  -- Makes emacs keybindings easier to type

  myEditor :: String
  myEditor = "emacsclient -c -a 'emacs'"  -- Sets emacs as editor

  myFileManager :: String
  myFileManager = "pcmanfm"   -- Sets pcmanfm as file manager

  myScreenshot :: String
  myScreenshot = "scrot 'screenshot-%s.jpg' -e 'mv $f $$(xdg-user-dir PICTURES)'"

  myBorderWidth :: Dimension
  myBorderWidth = 2           -- Sets border width for windows

  myNormColor :: String       -- Border color of normal windows
  myNormColor   = colorBack   -- This variable is imported from Colors.THEME

  myFocusColor :: String      -- Border color of focused windows
  myFocusColor  = color05     -- This variable is imported from Colors.THEME

  windowCount :: X (Maybe String)
  windowCount = gets $ Just . show . length . W.integrate' . W.stack . W.workspace . W.current . windowset

#+end_src

* Autostart (The Startup Hook)

These are commands we want XMonad to execute on startup this are only few, most of the commands are already written in =xinitrc=

#+begin_src haskell

  myStartupHook :: X ()
  myStartupHook = do
    -- spawn "killall conky"   -- kill current conky on each restart

    -- spawn ("sleep 2 && conky -c $HOME/.xmonad/lib/Scripts/conkyrc")
    spawn ("sxhkd -c $HOME/.xmonad/lib/Scripts/sxhkdrc")
    spawn ("lxsession")
    spawn ("picom --experimental-backends -b")
    spawn ("nm-applet")
    spawn ("volumeicon")
    spawn ("xsetroot -cursor_name left_ptr")

    spawnOnce "nitrogen --set-scaled --restore &"

    setWMName "LG3D"

#+end_src

* Layouts

Defining the layouts that I want to have available.

#+begin_src haskell

  mySpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
  mySpacing i = spacingRaw False (Border i i i i) True (Border i i i i) True

  -- Below is a variation of the above except no borders are applied
  -- if fewer than two windows. So a single window has no gaps.
  mySpacing' :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
  mySpacing' i = spacingRaw True (Border i i i i) True (Border i i i i) True

  -- Defining a bunch of layouts, many that I don't use.
  -- limitWindows n sets maximum number of windows displayed for layout.
  -- mySpacing n sets the gap size around the windows.
  tall     = renamed [Replace "tall"]
             $ smartBorders
             $ windowNavigation
             $ subLayout [] (smartBorders Simplest)
             $ limitWindows 12
             $ mySpacing 4
             $ ResizableTall 1 (3/100) (1/2) []
  monocle  = renamed [Replace "monocle"]
             $ smartBorders
             $ windowNavigation
             $ subLayout [] (smartBorders Simplest)
             $ limitWindows 20 Full
  floats   = renamed [Replace "floats"]
             $ smartBorders
             $ limitWindows 20 simplestFloat

  -- Theme for showWName which prints current workspace when you change workspaces.
  myShowWNameTheme :: SWNConfig
  myShowWNameTheme = def
      { swn_font              = "xft:FantasqueSansMono Nerd Font:bold:size=60"
      , swn_fade              = 0.3
      , swn_bgcolor           = "#282a36"
      , swn_color             = "#f8f8f2"
      }

  -- The layout hook
  myLayoutHook = avoidStruts $ mouseResize $ windowArrange $ T.toggleLayouts floats
                 $ mkToggle (NBFULL ?? NOBORDERS ?? EOT) myDefaultLayout
               where
                 myDefaultLayout =     withBorder myBorderWidth tall
                                   ||| noBorders monocle
                                   ||| floats
#+end_src

* Workspaces

I have made my workspaces in xmobar "clickable." Clickable workspaces means the mouse can be used to switch workspaces. This requires =xdotool= to be installed. You need to use UnsafeStdInReader instead of simply StdInReader in your xmobar config so you can pass actions to it.

#+begin_src haskell

  -- myWorkspaces = [" 1 ", " 2 ", " 3 ", " 4 ", " 5 ", " 6 ", " 7 ", " 8 ", " 9 "]
  myWorkspaces = [" ter ", " web ", " dev ", " doc ", " vbox ", " chat ", " mus ", " vid ", " xtra "]
  myWorkspaceIndices = M.fromList $ zipWith (,) myWorkspaces [1..] -- (,) == \x y -> (x,y)

  clickable ws = "<action=xdotool key super+"++show i++">"++ws++"</action>"
      where i = fromJust $ M.lookup ws myWorkspaceIndices

#+end_src

* Managehook

Sets some rules for certain programs. Examples include forcing certain programs to always float, or to always appear on a certain workspace.  Forcing programs to a certain workspace with a doShift requires =xdotool= if you are using clickable workspaces. You need the className or title of the program. Use =xprop= to get this info.

#+begin_src haskell

  myManageHook :: XMonad.Query (Data.Monoid.Endo WindowSet)
  myManageHook = composeAll
       [ className =? "confirm"            --> doFloat
       , className =? "file_progress"      --> doFloat
       , className =? "dialog"             --> doFloat
       , className =? "download"           --> doFloat
       , className =? "error"              --> doFloat
       , className =? "Gimp"               --> doFloat
       , className =? "notification"       --> doFloat
       , className =? "pinentry-gtk-2"     --> doFloat
       , className =? "splash"             --> doFloat
       , className =? "toolbar"            --> doFloat
       , className =? "Yad"                --> doCenterFloat
       , title =? "Oracle VM VirtualBox Manager"  --> doFloat
       , title =? "Mozilla Firefox"        --> doShift ( myWorkspaces !! 1 )
       , className =? "Brave-browser"      --> doShift ( myWorkspaces !! 1 )
       , className =? "Min"                --> doShift ( myWorkspaces !! 1 )
       , className =? "qutebrowser"        --> doShift ( myWorkspaces !! 1 )
       , className =? "Vimb"               --> doShift ( myWorkspaces !! 1 )
       , className =? "Tor Browser"        --> doShift ( myWorkspaces !! 1 )
       , className =? "jetbrains-idea-ce"  --> doShift ( myWorkspaces !! 2 )
       , className =? "jetbrains-studio"   --> doShift ( myWorkspaces !! 2 )
       , className =? "Subl"               --> doShift ( myWorkspaces !! 2 )
       , className =? "DesktopEditors"     --> doShift ( myWorkspaces !! 3 )
       , className =? "VirtualBox Manager" --> doShift ( myWorkspaces !! 4 )
       , className =? "discord"            --> doShift ( myWorkspaces !! 5 )
       , className =? "Thunderbird"        --> doShift ( myWorkspaces !! 5 )
       , className =? "Spotify"            --> doShift ( myWorkspaces !! 6 )
       , className =? "mpv"                --> doShift ( myWorkspaces !! 7 )
       , className =? "Gimp"               --> doShift ( myWorkspaces !! 8 )
       , (className =? "firefox" <&&> resource =? "Dialog") --> doFloat  -- Float Firefox Dialog
       , isFullscreen -->  doFullFloat
       ]

#+end_src

* Keybindings

I am using the Xmonad.Util.EZConfig module which allows keybindings to be written in simpler, emacs-like format.  The Super/Windows key is 'M' (the modkey).  The ALT key is 'M1'.  SHIFT is 'S' and CTR is 'C'.

| A FEW KEYBINDINGS       | ASSOCIATED ACTION                                            |
|-------------------------+--------------------------------------------------------------|
| MODKEY + RETURN         | opens terminal (alacritty)                                   |
| MODKEY + TAB            | rotates through the available layouts                        |
| MODKEY + SPACE          | toggles fullscreen on/off (useful for watching videos)       |
| MODKEY + q              | closes window with focus                                     |
| MODKEY + SHIFT + r      | restarts xmonad                                              |
| MODKEY + x              | quits xmonad                                                 |
| MODKEY + 1-9            | switch focus to workspace (1-9)                              |
| MODKEY + SHIFT + 1-9    | send focused window to workspace (1-9)                       |
| MODKEY + j              | windows focus down (switches focus between windows in stack) |
| MODKEY + k              | windows focus up (switches focus between windows in stack)   |
| MODKEY + SHIFT + j      | windows swap down (swap windows in the stack)                |
| MODKEY + SHIFT + k      | windows swap up (swap the windows in the stack)              |
| MODKEY + h              | shrink window (decreases window width)                       |
| MODKEY + l              | expand window (increases window width)                       |
| MODKEY + t              | force floating window back into tiling                       |

#+begin_src haskell

  -- START_KEYS
  myKeys :: [(String, X ())]
  myKeys =
      -- KB_GROUP Xmonad
          [ ("M-C-r", spawn "xmonad --recompile")       -- Recompiles xmonad
          , ("M-S-r", spawn "xmonad --restart")         -- Restarts xmonad
          , ("M-x", io exitSuccess)                     -- Quits xmonad

      -- KB_GROUP Useful programs to have a keybinding for launch
          , ("M-<Return>", spawn (myTerminal))
          , ("M-b", spawn (myBrowser))
          , ("M-v", spawn ("vimb"))
          , ("M-S-b", spawn ("qutebrowser"))
          , ("M-S-<Return>", spawn (myEmacs))
          , ("M-S-f", spawn (myFileManager))
          , ("C-<Return>", spawn (myScreenshot))

      -- KB_GROUP Kill windows
          , ("M-q", kill1)       -- Kill the currently focused client
          , ("M-S-q", killAll)   -- Kill all windows on current workspace

      -- KB_GROUP Floating windows
          , ("M-f", sendMessage (T.Toggle "floats")) -- Toggles my 'floats' layout
          , ("M-t", withFocused $ windows . W.sink)  -- Push floating window back to tile
          , ("M-S-t", sinkAll)                       -- Push ALL floating windows to tile

      -- KB_GROUP Windows navigation
          , ("M-m", windows W.focusMaster)  -- Move focus to the master window
          , ("M-j", windows W.focusDown)    -- Move focus to the next window
          , ("M-k", windows W.focusUp)      -- Move focus to the prev window
          , ("M-S-m", windows W.swapMaster) -- Swap the focused window and the master window
          , ("M-S-j", windows W.swapDown)   -- Swap focused window with next window
          , ("M-S-k", windows W.swapUp)     -- Swap focused window with prev window
          , ("M-<Backspace>", promote)      -- Moves focused window to master, others maintain order
          , ("M-S-<Tab>", rotSlavesDown)    -- Rotate all windows except master and keep focus in place
          , ("M-C-<Tab>", rotAllDown)       -- Rotate all the windows in the current stack

      -- KB_GROUP Layouts
          , ("M-<Tab>", sendMessage NextLayout)           -- Switch to next layout
          , ("M-<Space>", sendMessage (MT.Toggle NBFULL) >> sendMessage ToggleStruts) -- Toggles noborder/full

      -- KB_GROUP Window resizing
          , ("M-h", sendMessage Shrink)                   -- Shrink horiz window width
          , ("M-l", sendMessage Expand)                   -- Expand horiz window width
          , ("M-M1-j", sendMessage MirrorShrink)          -- Shrink vert window width
          , ("M-M1-k", sendMessage MirrorExpand)          -- Expand vert window width

          ]
  -- END_KEYS

#+end_src

* Main

This is the "main" of XMonad. This where everything in our configs comes together and works.

#+begin_src haskell

  main :: IO ()
  main = do
      xmproc0 <- spawnPipe ("xmobar -x 0 $HOME/.xmonad/lib/Scripts/xmobarrc")
      xmonad $ ewmh def
          { manageHook         = myManageHook <+> manageDocks
          , handleEventHook    = docksEventHook -- <+> fullscreenEventHook
          , modMask            = myModMask
          , terminal           = myTerminal
          , startupHook        = myStartupHook
          , layoutHook         = showWName' myShowWNameTheme $ myLayoutHook
          , workspaces         = myWorkspaces
          , borderWidth        = myBorderWidth
          , normalBorderColor  = myNormColor
          , focusedBorderColor = myFocusColor
          , logHook = dynamicLogWithPP $ xmobarPP
                -- XMOBAR SETTINGS
                { ppOutput = \x -> hPutStrLn xmproc0 x   -- xmobar on monitor 1
                  -- Current workspace
                , ppCurrent = xmobarColor color06 "" . wrap "[" "]"
                  -- Visible but not current workspace
                , ppVisible = xmobarColor color06 "" . clickable
                  -- Hidden workspace
                , ppHidden = xmobarColor color05 "" . wrap "*" "" .clickable
                  -- Hidden workspaces (no windows)
                , ppHiddenNoWindows = xmobarColor color05 ""  . clickable
                  -- Title of active window
                , ppTitle = xmobarColor color08 "" . shorten 70
                  -- Separator character
                , ppSep =  "<fc=" ++ color09 ++ "> <fn=1>|</fn> </fc>"
                  -- Urgent workspace
                , ppUrgent = xmobarColor color02 "" . wrap "!" "!"
                  -- Adding # of windows on current workspace to the bar
                , ppExtras  = [windowCount]
                  -- order of things in xmobar
                , ppOrder  = \(ws:l:t:ex) -> [ws,l]++ex++[t]
                }
          } `additionalKeysP` myKeys

#+end_src
